{"version":3,"sources":["components/Drumpad.js","components/PadBank.js","components/Control.js","App.js","serviceWorker.js","index.js"],"names":["Drumpad","props","state","status","handleClick","bind","handleKeyDown","document","addEventListener","this","removeEventListener","setState","sound","getElementById","keyTrigger","currentTime","play","setTimeout","power","updateDisplay","id","e","keyCode","className","onClick","src","volume","Component","bankOne","url","PadBank","padBank","map","drumpad","key","Control","type","min","max","step","value","onChange","adjustVolume","display","powerSwitch","App","displayClipName","name","target","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5187ac0e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Drumpad extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: 'inactive'\n        }\n\n        this.handleClick = this.handleClick.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown)\n    }\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown)\n    }\n\n    handleClick() {\n        this.setState({\n            status: 'active'\n        })\n\n        let sound = document.getElementById(this.props.keyTrigger);\n            sound.currentTime = 0;\n            sound.play();\n\n            setTimeout(() => {\n                this.setState({\n                    status: 'inactive'\n                })\n            }, 100);\n\n            if (this.props.power == 'on') {this.props.updateDisplay(this.props.id)}\n\n    }\n\n    handleKeyDown(e) {\n        if (e.keyCode == this.props.keyCode) {\n            this.handleClick();\n        }\n    }\n    render() {\n        const className = 'drum-pad ' + this.state.status + ' ' + this.props.power\n        return (\n            <div className = {className} onClick = {this.handleClick} id = {this.props.id}>\n                <audio src = {this.props.src} \n                       id = {this.props.keyTrigger} \n                       className = 'clip'\n                       volume = {this.props.volume}>\n                </audio>\n                {this.props.keyTrigger}\n            </div>\n        );\n    }\n}\n\nexport default Drumpad;","import React from 'react';\nimport Drumpad from './Drumpad'\n\nconst bankOne = [{\n    keyCode: 81,\n    keyTrigger: 'Q',\n    id: 'Heater-1',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\n  }, {\n    keyCode: 87,\n    keyTrigger: 'W',\n    id: 'Heater-2',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\n  }, {\n    keyCode: 69,\n    keyTrigger: 'E',\n    id: 'Heater-3',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\n  }, {\n    keyCode: 65,\n    keyTrigger: 'A',\n    id: 'Heater-4',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\n  }, {\n    keyCode: 83,\n    keyTrigger: 'S',\n    id: 'Clap',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n  }, {\n    keyCode: 68,\n    keyTrigger: 'D',\n    id: 'Open-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n  }, {\n    keyCode: 90,\n    keyTrigger: 'Z',\n    id: \"Kick-n'-Hat\",\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n  }, {\n    keyCode: 88,\n    keyTrigger: 'X',\n    id: 'Kick',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\n  }, {\n    keyCode: 67,\n    keyTrigger: 'C',\n    id: 'Closed-HH',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n  },\n];\n\nconst PadBank = (props) => {\n\n    let padBank = bankOne.map((drumpad) => \n                    <Drumpad keyCode = {drumpad.keyCode}\n                                keyTrigger = {drumpad.keyTrigger}\n                                src = {props.power == 'on' ? drumpad.url : ''}\n                                id = {drumpad.id}\n                                key = {drumpad.keyCode}\n                                updateDisplay={props.updateDisplay} \n                                power = {props.power}\n                                volume = {props.volume}\n                                /> )\n    return (\n        <div id = 'padBank'>\n            {padBank}\n        </div>\n    );\n    \n}\n\nexport default PadBank;","import React from 'react';\n\nfunction Control(props) {\n    return (\n        <div id = 'control'>\n          <div id = 'volume'>\n            <input id = 'volume-control' type = 'range' min = '0' max = '1' step = '0.01' value = {props.volume} onChange = {props.adjustVolume}></input>\n          </div>\n          <div id = 'display'>\n            {props.display}\n          </div>\n          <div id = 'switch' >\n            power \n            <i id = 'switch-icon' onClick = {props.powerSwitch} className = {props.className}>\n            </i>\n          </div>\n           \n        </div>\n    );\n}\n\nexport default Control;","\nimport React, { Component } from 'react';\nimport PadBank from './components/PadBank';\nimport Control from './components/Control'\nimport './App.css'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: '',\n      power: 'on',\n      volume: 0.3\n    }\n    this.displayClipName = this.displayClipName.bind(this);\n    this.powerSwitch = this.powerSwitch.bind(this);\n    this.adjustVolume = this.adjustVolume.bind(this);\n  }\n\n  displayClipName(name) {\n    this.setState({\n      display: name\n    });\n\n    setTimeout(() => {\n      this.setState({\n        display: ' '\n      })\n    }, 1000);\n  }\n\n  powerSwitch() {\n    this.state.power == 'off' ? this.setState({\n      power: 'on'\n    }) : this.setState({\n      power: 'off'\n    })\n\n    setTimeout(() => {\n      this.displayClipName('Power ' + this.state.power)\n    }, 0);\n  }\n\n  adjustVolume(e) {\n    if (this.state.power == 'on') {\n      this.setState({\n        volume: e.target.value,\n        display: 'Volume ' + Math.round(100 * this.state.volume)\n      })\n    }\n\n    setTimeout(() => {\n      this.setState({\n        display: ' '\n      })\n    }, 1000);\n  }\n\n\n  render() {\n    const className = 'fas fa-toggle-' + this.state.power\n    return (\n      <div id = 'drum-machine' className = 'inner-container'> \n        <PadBank \tupdateDisplay={this.displayClipName} power = {this.state.power} volume = {this.state.volume}/>\n        <Control display = {this.state.display} volume = {this.state.volume} adjustVolume = {this.adjustVolume} className = {className} powerSwitch = {this.powerSwitch}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}